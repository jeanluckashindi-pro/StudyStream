"use client";

import React, { useState } from "react";
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";

const StudentAnalyticsSection = () => {
  const [activeTab, setActiveTab] = useState("evolution");

  // Données d'évolution mensuelle
  const evolutionData = [
    {
      mois: "Sept",
      inscriptions: 1200,
      presents: 1150,
      abandons: 20,
      payements: 1100,
    },
    {
      mois: "Oct",
      inscriptions: 1180,
      presents: 1120,
      abandons: 35,
      payements: 1080,
    },
    {
      mois: "Nov",
      inscriptions: 1160,
      presents: 1100,
      abandons: 45,
      payements: 1050,
    },
    {
      mois: "Déc",
      inscriptions: 1150,
      presents: 1080,
      abandons: 55,
      payements: 1030,
    },
    {
      mois: "Jan",
      inscriptions: 1140,
      presents: 1060,
      abandons: 65,
      payements: 1010,
    },
    {
      mois: "Fév",
      inscriptions: 1130,
      presents: 1050,
      abandons: 70,
      payements: 1000,
    },
    {
      mois: "Mars",
      inscriptions: 1120,
      presents: 1040,
      abandons: 75,
      payements: 990,
    },
  ];

  // Données de répartition des statuts
  const statusData = [
    { name: "Présents Réguliers", value: 850, color: "#10B981" },
    { name: "Présents Irréguliers", value: 200, color: "#F59E0B" },
    { name: "Abandons", value: 75, color: "#EF4444" },
    { name: "Suspendus", value: 25, color: "#6B7280" },
  ];

  // Données de paiement
  const paymentData = [
    {
      mois: "Sept",
      totalDu: 120000,
      paye: 110000,
      enRetard: 8000,
      impaye: 2000,
    },
    {
      mois: "Oct",
      totalDu: 118000,
      paye: 108000,
      enRetard: 7000,
      impaye: 3000,
    },
    {
      mois: "Nov",
      totalDu: 116000,
      paye: 105000,
      enRetard: 8000,
      impaye: 3000,
    },
    {
      mois: "Déc",
      totalDu: 115000,
      paye: 103000,
      enRetard: 9000,
      impaye: 3000,
    },
    {
      mois: "Jan",
      totalDu: 114000,
      paye: 101000,
      enRetard: 10000,
      impaye: 3000,
    },
    {
      mois: "Fév",
      totalDu: 113000,
      paye: 100000,
      enRetard: 10000,
      impaye: 3000,
    },
    {
      mois: "Mars",
      totalDu: 112000,
      paye: 99000,
      enRetard: 10000,
      impaye: 3000,
    },
  ];

  // Données de progression académique
  const progressionData = [
    {
      niveau: "1ère Année",
      inscrits: 400,
      reussites: 320,
      echecs: 60,
      abandons: 20,
    },
    {
      niveau: "2ème Année",
      inscrits: 350,
      reussites: 280,
      echecs: 50,
      abandons: 20,
    },
    {
      niveau: "3ème Année",
      inscrits: 300,
      reussites: 250,
      echecs: 35,
      abandons: 15,
    },
    {
      niveau: "4ème Année",
      inscrits: 250,
      reussites: 220,
      echecs: 20,
      abandons: 10,
    },
  ];

  const StatCard = ({ icon, title, value, subtitle, color = "primary" }) => (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-md border border-gray-200 dark:border-gray-700">
      <div className="flex items-center gap-3">
        <div
          className={`w-10 h-10 rounded-lg bg-${color}-100 dark:bg-${color}-900 flex items-center justify-center`}
        >
          <i className={`${icon} text-${color}-600 dark:text-${color}-400`}></i>
        </div>
        <div>
          <h3 className="text-sm font-medium text-gray-600 dark:text-gray-400">
            {title}
          </h3>
          <p className="text-xl font-bold text-gray-900 dark:text-white">
            {value}
          </p>
          {subtitle && (
            <p className="text-xs text-gray-500 dark:text-gray-400">
              {subtitle}
            </p>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="w-full space-y-6 p-6">
      {/* En-tête de section */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <i className="pi pi-chart-line text-blue-600"></i>
            Analytique des Étudiants
          </h2>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Suivi détaillé de l'évolution, progression et paiements des
            étudiants
          </p>
        </div>
        <div className="flex gap-2">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
            <i className="pi pi-download"></i>
            Exporter
          </button>
        </div>
      </div>

      {/* Cartes de statistiques rapides */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <StatCard
          icon="pi pi-users"
          title="Total Inscrits"
          value="1,150"
          subtitle="Cette année"
          color="blue"
        />
        <StatCard
          icon="pi pi-user-plus"
          title="Actifs"
          value="1,050"
          subtitle="91.3% du total"
          color="green"
        />
        <StatCard
          icon="pi pi-user-minus"
          title="Abandons"
          value="75"
          subtitle="6.5% du total"
          color="red"
        />
        <StatCard
          icon="pi pi-credit-card"
          title="Paiements"
          value="99,000 €"
          subtitle="88.4% collectés"
          color="purple"
        />
      </div>

      {/* Onglets de navigation */}
      <div className="border-b border-gray-200 dark:border-gray-700">
        <nav className="flex space-x-8">
          {[
            { id: "evolution", label: "Évolution", icon: "pi pi-chart-line" },
            { id: "status", label: "Statuts", icon: "pi pi-chart-pie" },
            { id: "payments", label: "Paiements", icon: "pi pi-credit-card" },
            {
              id: "progression",
              label: "Progression",
              icon: "pi pi-chart-bar",
            },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                activeTab === tab.id
                  ? "border-blue-500 text-blue-600 dark:text-blue-400"
                  : "border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
              }`}
            >
              <i className={tab.icon}></i>
              {tab.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Contenu des onglets */}
      <div className="space-y-6">
        {activeTab === "evolution" && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Évolution des Inscriptions vs Présences
              </h3>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={evolutionData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="mois" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="inscriptions"
                    stroke="#3B82F6"
                    strokeWidth={2}
                    name="Inscrits"
                  />
                  <Line
                    type="monotone"
                    dataKey="presents"
                    stroke="#10B981"
                    strokeWidth={2}
                    name="Présents"
                  />
                  <Line
                    type="monotone"
                    dataKey="abandons"
                    stroke="#EF4444"
                    strokeWidth={2}
                    name="Abandons"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Tendance des Abandons
              </h3>
              <ResponsiveContainer width="100%" height={300}>
                <AreaChart data={evolutionData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="mois" />
                  <YAxis />
                  <Tooltip />
                  <Area
                    type="monotone"
                    dataKey="abandons"
                    stroke="#EF4444"
                    fill="#FEE2E2"
                    strokeWidth={2}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}

        {activeTab === "status" && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Répartition des Statuts Étudiants
              </h3>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={statusData}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent }) =>
                      `${name}: ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {statusData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Détails des Statuts
              </h3>
              <div className="space-y-4">
                {statusData.map((status, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg"
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className="w-4 h-4 rounded-full"
                        style={{ backgroundColor: status.color }}
                      ></div>
                      <span className="font-medium text-gray-900 dark:text-white">
                        {status.name}
                      </span>
                    </div>
                    <div className="text-right">
                      <span className="text-lg font-bold text-gray-900 dark:text-white">
                        {status.value}
                      </span>
                      <p className="text-sm text-gray-500">
                        {(
                          (status.value /
                            statusData.reduce((sum, s) => sum + s.value, 0)) *
                          100
                        ).toFixed(1)}
                        %
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === "payments" && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Évolution des Paiements
              </h3>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={paymentData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="mois" />
                  <YAxis />
                  <Tooltip
                    formatter={(value) => [`${value.toLocaleString()} €`, ""]}
                  />
                  <Legend />
                  <Bar dataKey="paye" fill="#10B981" name="Payé" />
                  <Bar dataKey="enRetard" fill="#F59E0B" name="En retard" />
                  <Bar dataKey="impaye" fill="#EF4444" name="Impayé" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-md">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600 mb-2">
                    88.4%
                  </div>
                  <p className="text-gray-600 dark:text-gray-400">
                    Taux de Paiement
                  </p>
                  <p className="text-sm text-gray-500 mt-1">
                    99,000€ / 112,000€
                  </p>
                </div>
              </div>
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-md">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600 mb-2">
                    8.9%
                  </div>
                  <p className="text-gray-600 dark:text-gray-400">En Retard</p>
                  <p className="text-sm text-gray-500 mt-1">10,000€</p>
                </div>
              </div>
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-md">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600 mb-2">
                    2.7%
                  </div>
                  <p className="text-gray-600 dark:text-gray-400">Impayés</p>
                  <p className="text-sm text-gray-500 mt-1">3,000€</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === "progression" && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                Progression par Niveau Académique
              </h3>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={progressionData} layout="horizontal">
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" />
                  <YAxis dataKey="niveau" type="category" />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="reussites" fill="#10B981" name="Réussites" />
                  <Bar dataKey="echecs" fill="#F59E0B" name="Échecs" />
                  <Bar dataKey="abandons" fill="#EF4444" name="Abandons" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {progressionData.map((niveau, index) => (
                <div
                  key={index}
                  className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-md"
                >
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                    {niveau.niveau}
                  </h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        Inscrits:
                      </span>
                      <span className="font-medium">{niveau.inscrits}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-green-600">Réussites:</span>
                      <span className="font-medium text-green-600">
                        {niveau.reussites}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-orange-600">Échecs:</span>
                      <span className="font-medium text-orange-600">
                        {niveau.echecs}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-red-600">Abandons:</span>
                      <span className="font-medium text-red-600">
                        {niveau.abandons}
                      </span>
                    </div>
                    <div className="mt-2 pt-2 border-t">
                      <div className="text-xs text-gray-500">
                        Taux de réussite
                      </div>
                      <div className="font-bold text-green-600">
                        {((niveau.reussites / niveau.inscrits) * 100).toFixed(
                          1
                        )}
                        %
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default StudentAnalyticsSection;
